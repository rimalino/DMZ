{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appPlanName": {
      "type": "string",
      "metadata": {
        "description": "Name for the App Plan"
      }
    },
    "webAppName": {
      "type": "string",
      "metadata": {
        "description": "Name for the Web App"
      }
    },
    "appGwName": {
      "type": "string",
      "metadata": {
        "description": "Name for the Application GW"
      }
    },
    "vnetHubPrefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix assigned to Hub Virtual Network"
      }
    },
    "bastionPrefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix assigned to Bastion Subnet"
      }
    },
    "firewallPrefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix assigned to Firewall Subnet"
      }
    },
    "appGwPrefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix assigned to Firewall Subnet"
      }
    },
    "vnetSpokePrefix": {
      "type": "string",
      "metadata": {
        "description": "Prefix assigned to Spoke Virtual Network"
      }
    },
    "adminPassword": {
      "type": "string",
      "metadata": {
        "description": "VM admin Password"
      }
    }
  },
  "variables": {
    "subnetName": "hosts-snet",
    "azfwName": "dmz-fw",
    "azfwPIPName": "fw-pip",
    "bastionName": "dmz-bastion",
    "bastionPIPName": "bastion-pip",
    "virtualNetworkHubName": "dmz-hub-vnet",
    "virtualNetworkSpokeName": "dmz-spoke-vnet",
    "vnetHubId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkHubName'))]",
    "diagnosticStorageAccountName": "[concat('claw', uniqueString(resourceGroup().id))]",
    "workspaceName": "dmz-test-wkspace",
    "winNicName": "winvm-nic",
    "winVMName": "win-vm",
    "adminUsername": "adminuser"
  },
  "resources": [
    {
      "type": "Microsoft.OperationalInsights/workspaces",
      "name": "[variables('workspaceName')]",
      "apiVersion": "2020-08-01",
      "location": "[resourceGroup().location]",
      "properties": {
        "sku": {
          "name": "standalone"
        },
        "retentionInDays": 30,
        "features": {
          "searchVersion": 1,
          "legacy": 0
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('diagnosticStorageAccountName')]",
      "apiVersion": "2016-01-01",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "StorageAccount"
      },
      "sku": {
        "name": "Standard_LRS"
      },
      "kind": "Storage"
    },
    {
      "apiVersion": "2019-02-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('azfwPIPName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "PublicIPAddress"
      },
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "apiVersion": "2019-02-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('bastionPIPName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "PublicIPAddress"
      },
      "sku": {
        "name": "Standard"
      },
      "properties": {
        "publicIPAllocationMethod": "Static"
      }
    },
    {
      "name": "defaultRouteTable",
      "type": "Microsoft.Network/routeTables",
      "apiVersion": "2019-02-01",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/azureFirewalls', variables('azfwName'))]"
      ],
      "properties": {
        "disableBgpRoutePropagation": false,
        "routes": [
          {
            "name": "default",
            "properties": {
              "addressPrefix": "0.0.0.0/0",
              "nextHopType": "VirtualAppliance",
              "nextHopIpAddress": "[reference(resourceId('Microsoft.Network/azureFirewalls', variables('azfwName'))).IpConfigurations[0].properties.PrivateIPAddress]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2019-05-10",
      "name": "RouteTabletoVnet",
      "type": "Microsoft.Resources/deployments",
      "dependsOn": [
        "[concat('Microsoft.Network/azureFirewalls/', variables('azfwName'))]",
        "[concat('Microsoft.Network/routeTables/', 'defaultRouteTable')]"
      ],
      "properties": {
        "mode": "Incremental",
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "resources": [
            {
              "apiVersion": "2019-04-01",
              "type": "Microsoft.Network/virtualNetworks",
              "name": "[variables('virtualNetworkSpokeName')]",
              "location": "[resourceGroup().location]",
              "tags": {
                "displayName": "VirtualNetwork"
              },
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('vnetSpokePrefix')]"
                  ]
                },
                "subnets": [
                  {
                    "name": "[variables('subnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('vnetSpokePrefix')]",
                      "routeTable": {
                        "id": "[resourceId('Microsoft.Network/routeTables', 'defaultRouteTable')]"
                      },
                      "serviceEndpoints": [
                        {
                          "service": "Microsoft.AzureCosmosDB"
                        },
                        {
                          "service": "Microsoft.CognitiveServices"
                        },
                        {
                          "service": "Microsoft.ContainerRegistry"
                        },
                        {
                          "service": "Microsoft.EventHub"
                        },
                        {
                          "service": "Microsoft.KeyVault"
                        },
                        {
                          "service": "Microsoft.ServiceBus"
                        },
                        {
                          "service": "Microsoft.Sql"
                        },
                        {
                          "service": "Microsoft.Storage"
                        },
                        {
                          "service": "Microsoft.Web"
                        },
                        {
                          "service": "Microsoft.AzureActiveDirectory"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    },
    {
      "apiVersion": "2019-04-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkSpokeName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "VirtualNetwork"
      },
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetSpokePrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[parameters('vnetSpokePrefix')]",
              "serviceEndpoints": [
                {
                  "service": "Microsoft.AzureCosmosDB"
                },
                {
                  "service": "Microsoft.CognitiveServices"
                },
                {
                  "service": "Microsoft.ContainerRegistry"
                },
                {
                  "service": "Microsoft.EventHub"
                },
                {
                  "service": "Microsoft.KeyVault"
                },
                {
                  "service": "Microsoft.ServiceBus"
                },
                {
                  "service": "Microsoft.Sql"
                },
                {
                  "service": "Microsoft.Storage"
                },
                {
                  "service": "Microsoft.Web"
                },
                {
                  "service": "Microsoft.AzureActiveDirectory"
                }
              ]
            }
          }
        ]
      },
      "resources": [
        {
          "apiVersion": "2020-05-01",
          "type": "virtualNetworkPeerings",
          "name": "Spoke-to-Hub-Peering",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkSpokeName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkHubName'))]"
          ],
          "comments": "This is the peering between Spoke Vnet and Hub Vnet",
          "properties": {
            "allowVirtualNetworkAccess": true,
            "allowForwardedTraffic": true,
            "allowGatewayTransit": false,
            "useRemoteGateways": false,
            "remoteVirtualNetwork": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkHubName'))]"
            }
          }
        }
      ]
    },
    {
      "apiVersion": "2019-04-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkHubName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "VirtualNetwork"
      },
      "dependsOn": [

      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[parameters('vnetHubPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "AzureFirewallSubnet",
            "properties": {
              "addressPrefix": "[parameters('firewallPrefix')]"
            }
          },
          {
            "name": "AzureBastionSubnet",
            "properties": {
              "addressPrefix": "[parameters('bastionPrefix')]"
            }
          },
          {
            "name": "applicationgw-subnet",
            "properties": {
              "addressPrefix": "[parameters('appGwPrefix')]"
            }
          }
        ]
      },
      "resources": [
        {
          "apiVersion": "2020-05-01",
          "type": "virtualNetworkPeerings",
          "name": "Hub-To-Spoke-Peering",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkSpokeName'))]",
            "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkHubName'))]"
          ],
          "comments": "This is the peering between Hub Vnet and Spoke Vnet",
          "properties": {
            "allowVirtualNetworkAccess": true,
            "allowForwardedTraffic": true,
            "allowGatewayTransit": false,
            "useRemoteGateways": false,
            "remoteVirtualNetwork": {
              "id": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkSpokeName'))]"
            }
          }
        }
      ]
    },
    {
      "type": "Microsoft.Network/azureFirewalls",
      "apiVersion": "2019-04-01",
      "name": "[variables('azfwName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkHubName'))]",
        "[resourceId('Microsoft.Network/PublicIPAddresses', variables('azfwPIPName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "IpConf",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkHubName'), 'AzureFirewallSubnet')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('azfwPIPName'))]"
              }
            }
          }
        ],
        "networkRuleCollections": [
          {
            "name": "Azure-Services",
            "properties": {
              "priority": 1000,
              "action": {
                "type": "Allow"
              },
              "rules": [
                {
                  "name": "AzureServices",
                  "protocols": [
                    "Any"
                  ],
                  "sourceAddresses": [
                    "*"
                  ],
                  "destinationAddresses": [
                    "AzureCloud"
                  ],
                  "sourceIpGroups": [],
                  "destinationIpGroups": [],
                  "destinationFqdns": [],
                  "destinationPorts": [
                    "*"
                  ]
                }
              ]
            }
          },
          {
            "name": "Internet",
            "properties": {
              "priority": 1001,
              "action": {
                "type": "Allow"
              },
              "rules": [
                {
                  "name": "Internet",
                  "protocols": [
                    "Any"
                  ],
                  "sourceAddresses": [
                    "*"
                  ],
                  "destinationAddresses": [
                    "*"
                  ],
                  "sourceIpGroups": [],
                  "destinationIpGroups": [],
                  "destinationFqdns": [],
                  "destinationPorts": [
                    "*"
                  ]
                }
              ]
            }
          }
        ],
        "natRuleCollections": [
          {
            "name": "webapp-rule",
            "properties": {
              "priority": 500,
              "action": {
                "type": "Dnat"
              },
              "rules": [
                {
                  "name": "webapp",
                  "protocols": [
                    "TCP"
                  ],
                  "translatedAddress": "10.3.0.22",
                  "translatedPort": "80",
                  "sourceAddresses": [
                    "*"
                  ],
                  "sourceIpGroups": [],
                  "destinationAddresses": [
                    "[reference(variables('azfwPIPName')).ipAddress]"
                  ],
                  "destinationPorts": [
                    "80"
                  ]
                }
              ]
            }
          }
        ]
      },
      "resources": [
        {
          "type": "Microsoft.Network/azureFirewalls/providers/diagnosticsettings",
          "name": "[concat(variables('azfwName'), '/Microsoft.Insights/service')]",
          "apiVersion": "2016-09-01",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Network/azureFirewalls/', variables('azfwName'))]",
            "[concat('Microsoft.OperationalInsights/workspaces/', variables('workspaceName'))]"
          ],
          "properties": {
            "workspaceId": "[resourceId('Microsoft.OperationalInsights/workspaces', variables('workspaceName'))]",
            "storageAccountId": "[resourceId('Microsoft.Storage/storageAccounts', variables('diagnosticStorageAccountName'))]",
            "logs": [
              {
                "category": "AzureFirewallApplicationRule",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              },
              {
                "category": "AzureFirewallNetworkRule",
                "enabled": true,
                "retentionPolicy": {
                  "enabled": true,
                  "days": 30
                }
              }
            ],
            "metrics": [
              {
                "category": "AllMetrics",
                "enabled": true,
                "retentionPolicy": {
                  "days": 30,
                  "enabled": true
                }
              }
            ]
          }
        }
      ]
    },
    {
      "apiVersion": "2018-10-01",
      "type": "Microsoft.Network/bastionHosts",
      "name": "[variables('bastionName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIpAddresses', variables('bastionPIPName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkHubName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "IpConf",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkHubName'), 'AzureBastionSubnet')]"
              },
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIpAddresses', variables('bastionPIPName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2018-02-01",
      "name": "[parameters('appPlanName')]",
      "location": "East US",
      "sku": {
        "name": "S1",
        "tier": "Standard",
        "size": "S1",
        "family": "S",
        "capacity": 1
      },
      "kind": "app",
      "properties": {
        "perSiteScaling": false,
        "maximumElasticWorkerCount": 1,
        "isSpot": false,
        "reserved": false,
        "isXenon": false,
        "hyperV": false,
        "targetWorkerCount": 0,
        "targetWorkerSizeId": 0
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2018-11-01",
      "name": "[parameters('webAppName')]",
      "location": "East US",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverFarms', parameters('appPlanName'))]"
      ],
      "kind": "app",
      "properties": {
        "enabled": true,
        "hostNameSslStates": [
          {
            "name": "[concat(parameters('webAppName'), '.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Standard"
          },
          {
            "name": "[concat(parameters('webAppName'), '.scm.azurewebsites.net')]",
            "sslState": "Disabled",
            "hostType": "Repository"
          }
        ],
        "serverFarmId": "[resourceId('Microsoft.Web/serverFarms', parameters('appPlanName'))]",
        "reserved": false,
        "isXenon": false,
        "hyperV": false,
        "siteConfig": {},
        "scmSiteAlsoStopped": false,
        "clientAffinityEnabled": true,
        "clientCertEnabled": false,
        "hostNamesDisabled": false,
        "containerSize": 0,
        "dailyMemoryTimeQuota": 0,
        "httpsOnly": false,
        "redundancyMode": "None"
      }
    },
    {
      "type": "Microsoft.Web/sites/config",
      "apiVersion": "2018-11-01",
      "name": "[concat(parameters('webAppName'), '/web')]",
      "location": "East US",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
      ],
      "properties": {
        "numberOfWorkers": 1,
        "defaultDocuments": [
          "Default.htm",
          "Default.html",
          "Default.asp",
          "index.htm",
          "index.html",
          "iisstart.htm",
          "default.aspx",
          "index.php",
          "hostingstart.html"
        ],
        "netFrameworkVersion": "v4.0",
        "requestTracingEnabled": false,
        "remoteDebuggingEnabled": false,
        "httpLoggingEnabled": false,
        "logsDirectorySizeLimit": 35,
        "detailedErrorLoggingEnabled": false,
        "publishingUsername": "[concat('$', parameters('webAppName'))]",
        "azureStorageAccounts": {},
        "scmType": "None",
        "use32BitWorkerProcess": true,
        "webSocketsEnabled": false,
        "alwaysOn": true,
        "managedPipelineMode": "Integrated",
        "virtualApplications": [
          {
            "virtualPath": "/",
            "physicalPath": "site\\wwwroot",
            "preloadEnabled": true
          }
        ],
        "loadBalancing": "LeastRequests",
        "experiments": {
          "rampUpRules": []
        },
        "autoHealEnabled": false,
        "localMySqlEnabled": false,
        "ipSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictions": [
          {
            "ipAddress": "Any",
            "action": "Allow",
            "priority": 1,
            "name": "Allow all",
            "description": "Allow all access"
          }
        ],
        "scmIpSecurityRestrictionsUseMain": false,
        "http20Enabled": false,
        "minTlsVersion": "1.2",
        "ftpsState": "AllAllowed",
        "reservedInstanceCount": 0
      }
    },
    {
      "type": "Microsoft.Web/sites/hostNameBindings",
      "apiVersion": "2018-11-01",
      "name": "[concat(parameters('webAppName'), '/', parameters('webAppName'), '.azurewebsites.net')]",
      "location": "East US",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
      ],
      "properties": {
        "siteName": "[parameters('webAppName')]",
        "hostNameType": "Verified"
      }
    },
    {
      "type": "Microsoft.Network/applicationGateways",
      "apiVersion": "2020-05-01",
      "name": "[parameters('appGwName')]",
      "location": "eastus",
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]",
        "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkHubName'))]"
      ],
      "properties": {
        "sku": {
          "name": "WAF_Medium",
          "tier": "WAF",
          "capacity": 2
        },
        "gatewayIPConfigurations": [
          {
            "name": "appGatewayIpConfig",
            "properties": {
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkHubName'), 'applicationgw-subnet')]"
              }
            }
          }
        ],
        "sslCertificates": [],
        "authenticationCertificates": [],
        "frontendIPConfigurations": [
          {
            "name": "appGwPrivateFrontendIp",
            "properties": {
              "privateIPAddress": "10.3.0.22",
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkHubName'), 'applicationgw-subnet')]"
              }
            }
          }
        ],
        "frontendPorts": [
          {
            "name": "port_80",
            "properties": {
              "port": 80
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "backend-pool",
            "properties": {
              "backendAddresses": [
                {
                  "fqdn": "[concat(parameters('webAppName'), '.azurewebsites.net')]"
                }
              ]
            }
          }
        ],
        "backendHttpSettingsCollection": [
          {
            "name": "http-settings",
            "properties": {
              "port": 443,
              "protocol": "Https",
              "cookieBasedAffinity": "Disabled",
              "pickHostNameFromBackendAddress": true,
              "requestTimeout": 20,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('appGwName')), '/probes/myprobe')]"
              }
            }
          }
        ],
        "httpListeners": [
          {
            "name": "http",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('appGwName')), '/frontendIPConfigurations/appGwPrivateFrontendIp')]"
              },
              "frontendPort": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('appGwName')), '/frontendPorts/port_80')]"
              },
              "protocol": "Http",
              "hostNames": [],
              "requireServerNameIndication": false
            }
          }
        ],
        "urlPathMaps": [],
        "requestRoutingRules": [
          {
            "name": "http-rule",
            "properties": {
              "ruleType": "Basic",
              "httpListener": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('appGwName')), '/httpListeners/http')]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('appGwName')), '/backendAddressPools/backend-pool')]"
              },
              "backendHttpSettings": {
                "id": "[concat(resourceId('Microsoft.Network/applicationGateways', parameters('appGwName')), '/backendHttpSettingsCollection/http-settings')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "myprobe",
            "properties": {
              "protocol": "Https",
              "path": "/",
              "interval": 30,
              "timeout": 30,
              "unhealthyThreshold": 3,
              "pickHostNameFromBackendHttpSettings": true,
              "minServers": 0,
              "match": {
                "statusCodes": [
                  "200-600"
                ]
              }
            }
          }
        ],
        "rewriteRuleSets": [],
        "redirectConfigurations": [],
        "webApplicationFirewallConfiguration": {
          "enabled": true,
          "firewallMode": "Detection",
          "ruleSetType": "OWASP",
          "ruleSetVersion": "3.0",
          "disabledRuleGroups": [],
          "requestBodyCheck": true,
          "maxRequestBodySizeInKb": 128,
          "fileUploadLimitInMb": 100
        },
        "enableHttp2": false
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('winNicName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "NetworkInterface"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('virtualNetworkSpokeName'))]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "subnet": {
                "id": "[resourceId('Microsoft.Network/virtualNetworks/subnets', variables('virtualNetworkSpokeName'), variables('subnetName'))]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2019-07-01",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('winVMName')]",
      "location": "[resourceGroup().location]",
      "tags": {
        "displayName": "VirtualMachine"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Storage/storageAccounts/', variables('diagnosticStorageAccountName'))]",
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('winNicName'))]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "Standard_D2s_v3"
        },
        "osProfile": {
          "computerName": "[variables('winVMName')]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[parameters('adminPassword')]",
          "windowsConfiguration": {
            "enableAutomaticUpdates": true,
            "provisionVMAgent": true
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "MicrosoftWindowsServer",
            "offer": "WindowsServer",
            "sku": "2019-Datacenter",
            "version": "latest"
          },
          "osDisk": {
            "createOption": "FromImage",
            "managedDisk": {
              "storageAccountType": "Standard_LRS"
            }
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('winNicName'))]"
            }
          ]
        }
      }
    }
  ]
}



